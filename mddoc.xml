<mddoc>
	<docpage target="README.md" autoloader="psr4" autoloader-root="src"
			 autoloader-root-namespace="donatj\MockWebServer">
		<section title="Mock Web Server">
			<badge-poser type="version"/>
			<badge-poser type="license"/>
			<badge-scrutinizer name="donatj/mock-webserver" type="quality"/>
			<!--<badge-scrutinizer name="donatj/mock-webserver" type="coverage"/>-->
			<badge-travis name="donatj/mock-webserver"/>
			<text><![CDATA[Simple, easy to use Mock Web Server for PHP unit testing. Gets along simply with PHPUnit and other unit testing frameworks.

Unit testing HTTP requests can be difficult, especially in cases where injecting a request library is difficult or not ideal. This helps greatly simplify the process.

Mock Web Server creates a local Web Server you can make predefined requests against.
]]></text>
			<section title="Documentation">
				<docpage target="docs/docs.md" autoloader="psr4" autoloader-root="src"
						 autoloader-root-namespace="donatj\MockWebServer">
					<section title="Documentation">
						<file name="src/MockWebServer.php"/>
						<file name="src/Response.php"/>
						<file name="src/ResponseStack.php"/>
						<file name="src/ResponseByMethod.php"/>
					</section>
				</docpage>
			</section>
			<section title="Requirements">
				<composer-requires/>
			</section>
			<section title="Installing">
				<composer-install dev="true"/>
			</section>
			<section title="Examples">
				<section title="Basic Usage">
					<text><![CDATA[The following example shows the most basic usage. If you do not define a path, the server will simply bounce a JSON body describing the request back to you.]]></text>
					<source name="example/basic.php" lang="php"/>
					<text>Outputs:</text>
					<exec cmd="php example/basic.php" format="code-block" />
				</section>
				<section title="Simple">
					<source name="example/simple.php" lang="php"/>
					<text>Outputs:</text>
					<exec cmd="php example/simple.php" format="code-block" />
				</section>
				<section title="PHPUnit">
					<source name="example/phpunit.php" lang="php"/>
				</section>
			</section>
			<section title="Multiple Responses from the Same Endpoint">
				<section title="Response Stack">
					<text>If you need an ordered set of responses, that can be done using the ResponseStack.</text>
					<source name="example/multi.php" lang="php"/>
					<text>Outputs:</text>
					<exec cmd="php example/multi.php" format="code-block" />
				</section>
				<section title="Response by Method">
					<text>If you need to vary responses to a single endpoint by method, you can do that using the ResponseByMethod response object.</text>
					<source name="example/multi.php" lang="php"/>
					<text>Outputs:</text>
					<exec cmd="php example/multi.php" format="code-block" />
				</section>
			</section>
		</section>
	</docpage>
</mddoc>
